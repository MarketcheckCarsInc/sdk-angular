/**
 * Marketcheck Cars API
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { BaseListing } from '../model/baseListing';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class InventoryService {

    protected basePath = 'https://marketcheck-prod.apigee.net/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Dealer inventory
     * Get a dealer&#39;s currently active inventory
     * @param dealerId Id representing the dealer to fetch the active inventory for
     * @param apiKey The API Authentication Key. Mandatory with all API calls.
     * @param rows Number of results to return. Default is 10. Max is 50
     * @param start Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDealerActiveInventory(dealerId: string, apiKey?: string, rows?: number, start?: number, observe?: 'body', reportProgress?: boolean): Observable<BaseListing>;
    public getDealerActiveInventory(dealerId: string, apiKey?: string, rows?: number, start?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BaseListing>>;
    public getDealerActiveInventory(dealerId: string, apiKey?: string, rows?: number, start?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BaseListing>>;
    public getDealerActiveInventory(dealerId: string, apiKey?: string, rows?: number, start?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (dealerId === null || dealerId === undefined) {
            throw new Error('Required parameter dealerId was null or undefined when calling getDealerActiveInventory.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (apiKey !== undefined) {
            queryParameters = queryParameters.set('api_key', <any>apiKey);
        }
        if (rows !== undefined) {
            queryParameters = queryParameters.set('rows', <any>rows);
        }
        if (start !== undefined) {
            queryParameters = queryParameters.set('start', <any>start);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<BaseListing>(`${this.basePath}/dealer/${encodeURIComponent(String(dealerId))}/active/inventory`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Dealer&#39;s historical inventory
     * [v1 : Not Implemented Yet] - Get a dealer&#39;s historical inventory
     * @param dealerId Id representing the dealer to fetch the active inventory for
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDealerHistoricalInventory(dealerId: string, observe?: 'body', reportProgress?: boolean): Observable<BaseListing>;
    public getDealerHistoricalInventory(dealerId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BaseListing>>;
    public getDealerHistoricalInventory(dealerId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BaseListing>>;
    public getDealerHistoricalInventory(dealerId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (dealerId === null || dealerId === undefined) {
            throw new Error('Required parameter dealerId was null or undefined when calling getDealerHistoricalInventory.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<BaseListing>(`${this.basePath}/dealer/${encodeURIComponent(String(dealerId))}/historical/inventory`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
