/**
 * Marketcheck Cars API
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { FacetItem } from '../model/facetItem';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class FacetsService {

    protected basePath = 'https://marketcheck-prod.apigee.net/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Facets
     * [Merged with the /search API - Please check the &#39;facets&#39; parameter to the Search API above] Get the facets for the given simple filter criteria (by given VIN&#39;s basic specification, Or by Year, Make, Model, Trim criteria) and facet fields
     * @param fields Comma separated list of fields to generate facets for. Supported fields are - year, make, model, trim, exterior_color, interior_color, drivetrain, vehicle_type, car_type, body_style, body_subtype, doors
     * @param apiKey The API Authentication Key. Mandatory with all API calls.
     * @param vin VIN as a reference to the type of car for which facets data is to be returned
     * @param year Year of the car
     * @param make Make of the car
     * @param model Model of the Car
     * @param trim Trim of the Car
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFacets(fields: string, apiKey?: string, vin?: string, year?: string, make?: string, model?: string, trim?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<FacetItem>>;
    public getFacets(fields: string, apiKey?: string, vin?: string, year?: string, make?: string, model?: string, trim?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<FacetItem>>>;
    public getFacets(fields: string, apiKey?: string, vin?: string, year?: string, make?: string, model?: string, trim?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<FacetItem>>>;
    public getFacets(fields: string, apiKey?: string, vin?: string, year?: string, make?: string, model?: string, trim?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (fields === null || fields === undefined) {
            throw new Error('Required parameter fields was null or undefined when calling getFacets.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (apiKey !== undefined) {
            queryParameters = queryParameters.set('api_key', <any>apiKey);
        }
        if (vin !== undefined) {
            queryParameters = queryParameters.set('vin', <any>vin);
        }
        if (year !== undefined) {
            queryParameters = queryParameters.set('year', <any>year);
        }
        if (make !== undefined) {
            queryParameters = queryParameters.set('make', <any>make);
        }
        if (model !== undefined) {
            queryParameters = queryParameters.set('model', <any>model);
        }
        if (trim !== undefined) {
            queryParameters = queryParameters.set('trim', <any>trim);
        }
        if (fields !== undefined) {
            queryParameters = queryParameters.set('fields', <any>fields);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<FacetItem>>(`${this.basePath}/facets`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
