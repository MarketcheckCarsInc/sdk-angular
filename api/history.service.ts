/**
 * Marketcheck Cars API
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { HistoricalListing } from '../model/historicalListing';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class HistoryService {

    protected basePath = 'https://marketcheck-prod.apigee.net/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get a cars online listing history
     * The history API returns online listing history for a car identified by its VIN. History listings are sorted in the descending order of the listing date / last seen date
     * @param vin The VIN to identify the car to fetch the listing history. Must be a valid 17 char VIN
     * @param apiKey The API Authentication Key. Mandatory with all API calls.
     * @param fields List of fields to fetch, in case the default fields list in the response is to be trimmed down
     * @param rows Number of results to return. Default is 10. Max is 50
     * @param page Page number to fetch the results for the given criteria. Default is 1.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public history(vin: string, apiKey?: string, fields?: string, rows?: number, page?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<HistoricalListing>>;
    public history(vin: string, apiKey?: string, fields?: string, rows?: number, page?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<HistoricalListing>>>;
    public history(vin: string, apiKey?: string, fields?: string, rows?: number, page?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<HistoricalListing>>>;
    public history(vin: string, apiKey?: string, fields?: string, rows?: number, page?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (vin === null || vin === undefined) {
            throw new Error('Required parameter vin was null or undefined when calling history.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (apiKey !== undefined) {
            queryParameters = queryParameters.set('api_key', <any>apiKey);
        }
        if (fields !== undefined) {
            queryParameters = queryParameters.set('fields', <any>fields);
        }
        if (rows !== undefined) {
            queryParameters = queryParameters.set('rows', <any>rows);
        }
        if (page !== undefined) {
            queryParameters = queryParameters.set('page', <any>page);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<HistoricalListing>>(`${this.basePath}/history/${encodeURIComponent(String(vin))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
