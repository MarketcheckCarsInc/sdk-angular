/**
 * Marketcheck Cars API
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Averages } from '../model/averages';
import { ComparisonPoint } from '../model/comparisonPoint';
import { CompetitorsPoint } from '../model/competitorsPoint';
import { DepreciationPoint } from '../model/depreciationPoint';
import { Mds } from '../model/mds';
import { PopularityItem } from '../model/popularityItem';
import { TrendPoint } from '../model/trendPoint';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class MarketService {

    protected basePath = 'https://marketcheck-prod.apigee.net/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * [MOCK] Get Averages for YMM
     * [Merged with the /search API - Please check the &#39;stats&#39; parameter to the Search API above] Get market averages for price / miles / msrp / dom (days on market) fields for active cars matching the given reference VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
     * @param vin VIN as a reference to the type of car for which averages data is to be returned
     * @param apiKey The API Authentication Key. Mandatory with all API calls.
     * @param year Year of the car
     * @param make Make of the car
     * @param model Model of the Car
     * @param trim Trim of the Car
     * @param fields Comma separated list of fields to generate stats for. Allowed fields in the list are - price, miles, msrp, dom (days on market)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAverages(vin: string, apiKey?: string, year?: string, make?: string, model?: string, trim?: string, fields?: string, observe?: 'body', reportProgress?: boolean): Observable<Averages>;
    public getAverages(vin: string, apiKey?: string, year?: string, make?: string, model?: string, trim?: string, fields?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Averages>>;
    public getAverages(vin: string, apiKey?: string, year?: string, make?: string, model?: string, trim?: string, fields?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Averages>>;
    public getAverages(vin: string, apiKey?: string, year?: string, make?: string, model?: string, trim?: string, fields?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (vin === null || vin === undefined) {
            throw new Error('Required parameter vin was null or undefined when calling getAverages.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (apiKey !== undefined) {
            queryParameters = queryParameters.set('api_key', <any>apiKey);
        }
        if (vin !== undefined) {
            queryParameters = queryParameters.set('vin', <any>vin);
        }
        if (year !== undefined) {
            queryParameters = queryParameters.set('year', <any>year);
        }
        if (make !== undefined) {
            queryParameters = queryParameters.set('make', <any>make);
        }
        if (model !== undefined) {
            queryParameters = queryParameters.set('model', <any>model);
        }
        if (trim !== undefined) {
            queryParameters = queryParameters.set('trim', <any>trim);
        }
        if (fields !== undefined) {
            queryParameters = queryParameters.set('fields', <any>fields);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Averages>(`${this.basePath}/averages`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Compare market
     * [MOCK] Get historical market trends for cars matching the given VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
     * @param vin VIN as a reference to the type of car for which comparison data is to be returned
     * @param apiKey The API Authentication Key. Mandatory with all API calls.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getComparison(vin: string, apiKey?: string, observe?: 'body', reportProgress?: boolean): Observable<ComparisonPoint>;
    public getComparison(vin: string, apiKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ComparisonPoint>>;
    public getComparison(vin: string, apiKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ComparisonPoint>>;
    public getComparison(vin: string, apiKey?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (vin === null || vin === undefined) {
            throw new Error('Required parameter vin was null or undefined when calling getComparison.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (apiKey !== undefined) {
            queryParameters = queryParameters.set('api_key', <any>apiKey);
        }
        if (vin !== undefined) {
            queryParameters = queryParameters.set('vin', <any>vin);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ComparisonPoint>(`${this.basePath}/comparison`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Competitors
     * [MOCK] Competitor cars in market for current vin
     * @param vin VIN as a reference to the type of car for which competitors data is to be returned
     * @param apiKey The API Authentication Key. Mandatory with all API calls.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCompetition(vin: string, apiKey?: string, observe?: 'body', reportProgress?: boolean): Observable<CompetitorsPoint>;
    public getCompetition(vin: string, apiKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompetitorsPoint>>;
    public getCompetition(vin: string, apiKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompetitorsPoint>>;
    public getCompetition(vin: string, apiKey?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (vin === null || vin === undefined) {
            throw new Error('Required parameter vin was null or undefined when calling getCompetition.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (apiKey !== undefined) {
            queryParameters = queryParameters.set('api_key', <any>apiKey);
        }
        if (vin !== undefined) {
            queryParameters = queryParameters.set('vin', <any>vin);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<CompetitorsPoint>(`${this.basePath}/competition`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Depreciation
     * [MOCK] Model resale value based on depreciation
     * @param vin VIN as a reference to the type of car for which Depreciation stats is to be returned
     * @param apiKey The API Authentication Key. Mandatory with all API calls.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDepreciation(vin: string, apiKey?: string, observe?: 'body', reportProgress?: boolean): Observable<DepreciationPoint>;
    public getDepreciation(vin: string, apiKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DepreciationPoint>>;
    public getDepreciation(vin: string, apiKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DepreciationPoint>>;
    public getDepreciation(vin: string, apiKey?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (vin === null || vin === undefined) {
            throw new Error('Required parameter vin was null or undefined when calling getDepreciation.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (apiKey !== undefined) {
            queryParameters = queryParameters.set('api_key', <any>apiKey);
        }
        if (vin !== undefined) {
            queryParameters = queryParameters.set('vin', <any>vin);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<DepreciationPoint>(`${this.basePath}/depreciation`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Market Days Supply
     * Get the basic information on specifications for a car identified by a valid VIN
     * @param vin VIN to decode
     * @param apiKey The API Authentication Key. Mandatory with all API calls.
     * @param exact Exact parameter
     * @param latitude Latitude component of location
     * @param longitude Longitude component of location
     * @param radius Radius around the search location
     * @param debug Debug parameter
     * @param includeSold To fetch sold vins
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMDS(vin: string, apiKey?: string, exact?: string, latitude?: number, longitude?: number, radius?: number, debug?: string, includeSold?: string, observe?: 'body', reportProgress?: boolean): Observable<Mds>;
    public getMDS(vin: string, apiKey?: string, exact?: string, latitude?: number, longitude?: number, radius?: number, debug?: string, includeSold?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Mds>>;
    public getMDS(vin: string, apiKey?: string, exact?: string, latitude?: number, longitude?: number, radius?: number, debug?: string, includeSold?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Mds>>;
    public getMDS(vin: string, apiKey?: string, exact?: string, latitude?: number, longitude?: number, radius?: number, debug?: string, includeSold?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (vin === null || vin === undefined) {
            throw new Error('Required parameter vin was null or undefined when calling getMDS.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (apiKey !== undefined) {
            queryParameters = queryParameters.set('api_key', <any>apiKey);
        }
        if (vin !== undefined) {
            queryParameters = queryParameters.set('vin', <any>vin);
        }
        if (exact !== undefined) {
            queryParameters = queryParameters.set('exact', <any>exact);
        }
        if (latitude !== undefined) {
            queryParameters = queryParameters.set('latitude', <any>latitude);
        }
        if (longitude !== undefined) {
            queryParameters = queryParameters.set('longitude', <any>longitude);
        }
        if (radius !== undefined) {
            queryParameters = queryParameters.set('radius', <any>radius);
        }
        if (debug !== undefined) {
            queryParameters = queryParameters.set('debug', <any>debug);
        }
        if (includeSold !== undefined) {
            queryParameters = queryParameters.set('include_sold', <any>includeSold);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Mds>(`${this.basePath}/mds`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Popularity
     * [MOCK] [Merged with the /search API - Please check the &#39;popularity&#39; parameter to the Search API above] Get the Popularity for the given simple filter criteria (by given Year, Make, Model, Trim criteria)
     * @param year Year of the car
     * @param make Make of the car
     * @param model Model of the Car
     * @param trim Trim of the Car
     * @param bodyType Body type to filter the cars on. Valid values are the ones returned by body_type facets API call
     * @param apiKey The API Authentication Key. Mandatory with all API calls.
     * @param stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPopularity(year: string, make: string, model: string, trim: string, bodyType: string, apiKey?: string, stats?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<PopularityItem>>;
    public getPopularity(year: string, make: string, model: string, trim: string, bodyType: string, apiKey?: string, stats?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PopularityItem>>>;
    public getPopularity(year: string, make: string, model: string, trim: string, bodyType: string, apiKey?: string, stats?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PopularityItem>>>;
    public getPopularity(year: string, make: string, model: string, trim: string, bodyType: string, apiKey?: string, stats?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined when calling getPopularity.');
        }
        if (make === null || make === undefined) {
            throw new Error('Required parameter make was null or undefined when calling getPopularity.');
        }
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling getPopularity.');
        }
        if (trim === null || trim === undefined) {
            throw new Error('Required parameter trim was null or undefined when calling getPopularity.');
        }
        if (bodyType === null || bodyType === undefined) {
            throw new Error('Required parameter bodyType was null or undefined when calling getPopularity.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (apiKey !== undefined) {
            queryParameters = queryParameters.set('api_key', <any>apiKey);
        }
        if (year !== undefined) {
            queryParameters = queryParameters.set('year', <any>year);
        }
        if (make !== undefined) {
            queryParameters = queryParameters.set('make', <any>make);
        }
        if (model !== undefined) {
            queryParameters = queryParameters.set('model', <any>model);
        }
        if (trim !== undefined) {
            queryParameters = queryParameters.set('trim', <any>trim);
        }
        if (bodyType !== undefined) {
            queryParameters = queryParameters.set('body_type', <any>bodyType);
        }
        if (stats !== undefined) {
            queryParameters = queryParameters.set('stats', <any>stats);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<PopularityItem>>(`${this.basePath}/popularity`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Trends for criteria
     * Get historical market trends for cars matching the given VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
     * @param vin VIN as a reference to the type of car for which trend data is to be returned
     * @param carType Car type. Allowed values are - new / used / certified
     * @param apiKey The API Authentication Key. Mandatory with all API calls.
     * @param year Year of the car
     * @param make Make of the car
     * @param model Model of the Car
     * @param trim Trim of the Car
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTrends(vin: string, carType: string, apiKey?: string, year?: string, make?: string, model?: string, trim?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TrendPoint>>;
    public getTrends(vin: string, carType: string, apiKey?: string, year?: string, make?: string, model?: string, trim?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TrendPoint>>>;
    public getTrends(vin: string, carType: string, apiKey?: string, year?: string, make?: string, model?: string, trim?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TrendPoint>>>;
    public getTrends(vin: string, carType: string, apiKey?: string, year?: string, make?: string, model?: string, trim?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (vin === null || vin === undefined) {
            throw new Error('Required parameter vin was null or undefined when calling getTrends.');
        }
        if (carType === null || carType === undefined) {
            throw new Error('Required parameter carType was null or undefined when calling getTrends.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (apiKey !== undefined) {
            queryParameters = queryParameters.set('api_key', <any>apiKey);
        }
        if (vin !== undefined) {
            queryParameters = queryParameters.set('vin', <any>vin);
        }
        if (carType !== undefined) {
            queryParameters = queryParameters.set('car_type', <any>carType);
        }
        if (year !== undefined) {
            queryParameters = queryParameters.set('year', <any>year);
        }
        if (make !== undefined) {
            queryParameters = queryParameters.set('make', <any>make);
        }
        if (model !== undefined) {
            queryParameters = queryParameters.set('model', <any>model);
        }
        if (trim !== undefined) {
            queryParameters = queryParameters.set('trim', <any>trim);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<TrendPoint>>(`${this.basePath}/trends`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
